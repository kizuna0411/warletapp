/**
 * „ÇØ„É©„ÉÉ„Ç∑„É•„É≠„Ç∞ÂØæÂøú„ÅÆ„ÉÜ„Çπ„ÉàÁî®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
 * TestFlightÁí∞Â¢É„Åß„ÅÆ„Ç®„É©„ÉºÂÜçÁèæ„Å®„Éá„Éê„ÉÉ„Ç∞ÊîØÊè¥
 */

import { Alert, Platform } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Constants from "expo-constants";
import { supabase } from "../../lib/supabase";
import { handleError, logError } from "./errorHandler";

// TestFlightÁí∞Â¢É„ÅÆÊ§úÂá∫
export const isTestFlightBuild = () => {
  // TestFlight„ÅÆ„Éì„É´„Éâ„ÅÆÂ†¥Âêà„ÄÅÁâπÂÆö„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇÑBundle ID„ÅßÂà§ÂÆö
  return process.env.NODE_ENV === "production" && __DEV__ === false;
};

// iOS 18Áí∞Â¢É„ÅÆÊ§úÂá∫
export const isIOS18OrLater = () => {
  if (Platform.OS !== "ios") {
    return false;
  }

  const version = Platform.Version;
  return typeof version === "string"
    ? parseInt(version.split(".")[0]) >= 18
    : version >= 18;
};

// Hermes „Ç®„É≥„Ç∏„É≥„ÅÆÊ§úÂá∫
export const isHermesEnabled = () => {
  return typeof HermesInternal === "object" && HermesInternal !== null;
};

// Áí∞Â¢ÉÊÉÖÂ†±„ÅÆÂèéÈõÜ
export const getEnvironmentInfo = () => {
  const info = {
    platform: Platform.OS,
    platformVersion: Platform.Version,
    isTestFlight: isTestFlightBuild(),
    isIOS18: isIOS18OrLater(),
    isHermes: isHermesEnabled(),
    timestamp: new Date().toISOString(),
    appVersion: Constants.manifest?.version || "Unknown",
    expoVersion: Constants.expoVersion || "Unknown",
  };

  console.log("üì± Environment Info:", info);
  return info;
};

// ÈáçË¶Å„Å™Âá¶ÁêÜ„Åß„ÅÆ‰∫ãÂâç„ÉÅ„Çß„ÉÉ„ÇØ
export const performSystemChecks = async () => {
  const checks = {
    supabaseConnection: false,
    asyncStorageAccess: false,
    authService: false,
    networkConnection: false,
  };

  try {
    // SupabaseÊé•Á∂ö„ÉÅ„Çß„ÉÉ„ÇØ
    if (supabase) {
      const { data, error } = await supabase.auth.getSession();
      checks.supabaseConnection = !error;
    }
  } catch (error) {
    logError(error, "System Check - Supabase");
  }

  try {
    // AsyncStorage „ÉÅ„Çß„ÉÉ„ÇØ
    const testKey = "system_check_test";
    await AsyncStorage.setItem(testKey, "test");
    const testValue = await AsyncStorage.getItem(testKey);
    await AsyncStorage.removeItem(testKey);
    checks.asyncStorageAccess = testValue === "test";
  } catch (error) {
    logError(error, "System Check - AsyncStorage");
  }

  try {
    // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÉÅ„Çß„ÉÉ„ÇØÔºàÁ∞°ÊòìÔºâ
    const response = await fetch("https://www.google.com/favicon.ico", {
      method: "HEAD",
      cache: "no-cache",
    });
    checks.networkConnection = response.ok;
  } catch (error) {
    logError(error, "System Check - Network");
  }

  console.log("üîç System Checks:", checks);
  return checks;
};

// „ÇØ„É©„ÉÉ„Ç∑„É•ÂÜçÁèæ„ÉÜ„Çπ„ÉàÔºàÈñãÁô∫Áî®Ôºâ
export const performCrashTests = () => {
  if (process.env.NODE_ENV === "production") {
    console.warn("Crash tests are disabled in production");
    return;
  }

  Alert.alert("„ÇØ„É©„ÉÉ„Ç∑„É•„ÉÜ„Çπ„Éà", "„Å©„ÅÆ„Çø„Ç§„Éó„ÅÆ„Ç®„É©„Éº„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÅãÔºü", [
    {
      text: "„Ç≠„É£„É≥„Çª„É´",
      style: "cancel",
    },
    {
      text: "Promise Rejection",
      onPress: () => {
        Promise.reject(new Error("Test Promise Rejection"));
      },
    },
    {
      text: "Throw Error",
      onPress: () => {
        throw new Error("Test Thrown Error");
      },
    },
    {
      text: "Supabase Error",
      onPress: async () => {
        try {
          await supabase.from("non_existent_table").select("*");
        } catch (error) {
          handleError(error, "Crash Test - Supabase");
        }
      },
    },
    {
      text: "Native Module Error",
      onPress: () => {
        // ‰∏çÊ≠£„Å™ Native „É¢„Ç∏„É•„Éº„É´Âëº„Å≥Âá∫„Åó
        const { NativeModules } = require("react-native");
        try {
          NativeModules.SomeNonExistentModule.someMethod();
        } catch (error) {
          handleError(error, "Crash Test - Native Module");
        }
      },
    },
  ]);
};

// „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÅÆÂèéÈõÜ„Å®Ë°®Á§∫
export const collectDebugInfo = async () => {
  try {
    const envInfo = getEnvironmentInfo();
    const systemChecks = await performSystemChecks();

    const debugInfo = {
      environment: envInfo,
      systemChecks,
      memoryUsage: performance.memory
        ? {
            used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
            total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
            limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024),
          }
        : "Not available",
      timestamp: new Date().toISOString(),
    };

    console.log("üêõ Debug Info:", debugInfo);

    // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Ç¢„É©„Éº„Éà„ÅßË°®Á§∫
    if (__DEV__) {
      Alert.alert(
        "„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±",
        `Áí∞Â¢É: ${envInfo.platform} ${envInfo.platformVersion}\n` +
          `TestFlight: ${envInfo.isTestFlight}\n` +
          `iOS 18+: ${envInfo.isIOS18}\n` +
          `Hermes: ${envInfo.isHermes}\n` +
          `Supabase: ${systemChecks.supabaseConnection ? "‚úÖ" : "‚ùå"}\n` +
          `AsyncStorage: ${systemChecks.asyncStorageAccess ? "‚úÖ" : "‚ùå"}\n` +
          `Network: ${systemChecks.networkConnection ? "‚úÖ" : "‚ùå"}`,
        [{ text: "OK" }]
      );
    }

    return debugInfo;
  } catch (error) {
    handleError(error, "Debug Info Collection");
    return null;
  }
};

export default {
  isTestFlightBuild,
  isIOS18OrLater,
  isHermesEnabled,
  getEnvironmentInfo,
  performSystemChecks,
  performCrashTests,
  collectDebugInfo,
};
